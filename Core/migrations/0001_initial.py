# Generated by Django 3.2.7 on 2022-02-13 11:19

import Core.models.Abstracts.AbstractFile
import Core.models.Projects.Event
import Core.models.Projects.MessageFile
import Core.models.Projects.Project
import Core.models.Users.ExternalProject
import Core.models.Users.User
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.datetime
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=150)),
            ],
            options={
                'verbose_name': 'Email',
                'verbose_name_plural': 'Emails',
                'db_table': 'email',
            },
        ),
        migrations.CreateModel(
            name='EventTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('checked', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=64, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Event Task',
                'verbose_name_plural': 'Event Tasks',
                'db_table': 'event_task',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('created_at', models.DateTimeField(default=None, editable=False, help_text='Data di creazione del modello', null=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(default=None, editable=False, help_text='Data di aggiornamento del modello', null=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_message', models.CharField(choices=[('TEXT', 'Text'), ('EVENT', 'Event'), ('IDEA', 'Idea'), ('UPDATE', 'Update'), ('POLL', 'Poll')], max_length=32)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'db_table': 'message',
                'ordering': ['-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MessageFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(max_length=1000, upload_to=Core.models.Projects.MessageFile.file_path)),
            ],
            options={
                'verbose_name': 'MessageFile',
                'verbose_name_plural': 'MessageFiles',
                'db_table': 'message_file',
            },
            bases=(models.Model, Core.models.Abstracts.AbstractFile.FileManager),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('created_at', models.DateTimeField(default=None, editable=False, help_text='Data di creazione del modello', null=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(default=None, editable=False, help_text='Data di aggiornamento del modello', null=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=516, null=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to=Core.models.Projects.Project.image_path, verbose_name='image')),
                ('link_site', models.TextField(blank=True, help_text='Link del sito di contatto del progetto', max_length=516, null=True, verbose_name='link site')),
                ('ended_at', models.DateField(blank=True, help_text='Data di chiusura del progetto. Se null il progetto Ã¨ aperto', null=True, verbose_name='ended')),
                ('num_swipe', models.PositiveBigIntegerField(default=0, help_text='Il numero di swipe fatti dal progetto', verbose_name='number swipe')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'project',
                'ordering': ['-updated_at'],
                'abstract': False,
            },
            bases=(models.Model, Core.models.Abstracts.AbstractFile.FileManager),
        ),
        migrations.CreateModel(
            name='ProjectTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('searches_number', models.PositiveBigIntegerField(default=0, help_text='Numero di ricerche fatte a questo tag', verbose_name='searches number')),
            ],
            options={
                'verbose_name': 'Projects Tag',
                'verbose_name_plural': 'Projects Tags',
                'db_table': 'project_tag',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', related_query_name='roles', to='Core.project')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='name')),
                ('type_skill', models.CharField(choices=[('Programming', 'Programming'), ('Managment', 'Management'), ('Design', 'Design'), ('Other', 'Other')], default='Other', max_length=64, verbose_name='type skill')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'db_table': 'skill',
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.PositiveIntegerField(default=1, help_text="Livello di competenza della skill dell'utente")),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_skill', related_query_name='user_skill', to='Core.skill')),
            ],
            options={
                'verbose_name': 'User Skill',
                'verbose_name_plural': 'Users Skills',
                'db_table': 'user_skill',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('image', models.ImageField(blank=True, max_length=1000, null=True, upload_to=Core.models.Projects.Event.image_path, verbose_name='image')),
                ('name', models.CharField(default=None, max_length=64, null=True, verbose_name='name')),
                ('started_at', models.DateTimeField(help_text='Data inizio evento', verbose_name='started at')),
                ('ended_at', models.DateTimeField(help_text='Data fine evento', verbose_name='ended at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='event', related_query_name='event', serialize=False, to='Core.message')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'event',
            },
            bases=('Core.message', models.Model, Core.models.Abstracts.AbstractFile.FileManager),
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('anonymus_voters', models.BooleanField(default=False, verbose_name='anonymus voters')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('text', models.TextField(blank=True, max_length=516, null=True, verbose_name='text')),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='poll', related_query_name='poll', serialize=False, to='Core.message')),
            ],
            options={
                'verbose_name': 'Polls',
                'verbose_name_plural': 'Polls',
                'db_table': 'poll',
            },
            bases=('Core.message',),
        ),
        migrations.CreateModel(
            name='ShowcaseUpdate',
            fields=[
                ('description', models.TextField(blank=True, null=True)),
                ('type_update', models.CharField(choices=[('DESC', 'Desc'), ('USERS', 'Users'), ('COLOR', 'Color'), ('NAME', 'Name')], default='DESC', help_text='Il tipo di aggiornamento avvenuto', max_length=16)),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='showcase_update', related_query_name='showcase_update', serialize=False, to='Core.message')),
            ],
            options={
                'verbose_name': 'Showcase Upadate',
                'verbose_name_plural': 'Showcase Updates',
                'db_table': 'showcase_update',
            },
            bases=('Core.message',),
        ),
        migrations.CreateModel(
            name='TextMessage',
            fields=[
                ('text', models.TextField(blank=True, max_length=516, null=True, verbose_name='text')),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='text_message', related_query_name='text_message', serialize=False, to='Core.message')),
            ],
            options={
                'verbose_name': 'Text Message',
                'verbose_name_plural': 'Text Messages',
                'db_table': 'text_message',
            },
            bases=('Core.message',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('image', models.ImageField(blank=True, null=True, upload_to=Core.models.Users.User.image_path, verbose_name='image')),
                ('username', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('main_role', models.CharField(blank=True, help_text="Indica il ruolo principale dell'utente (32 caratteri max)", max_length=32, null=True, verbose_name='main role')),
                ('date_birth', models.DateField(blank=True, null=True, verbose_name='date birth')),
                ('date_joined', models.DateTimeField(null=True, verbose_name='date joined')),
                ('active', models.BooleanField(default=True, verbose_name='is active')),
                ('blocked', models.BooleanField(default=False, help_text='Indica se un utente Ã¨ stato bloccato.', verbose_name='is blocked')),
                ('admin', models.BooleanField(default=False, verbose_name='is admin')),
                ('type_user', models.CharField(choices=[('Base', 'Base'), ('Verified', 'Verified'), ('Innovator', 'Innovator')], default='Base', max_length=64, verbose_name='type user')),
                ('type_vip', models.CharField(choices=[('FREE', 'Free'), ('LV1', 'Lv1'), ('LV2', 'Lv2'), ('LV3', 'Lv3')], default='FREE', max_length=64, verbose_name='type vip')),
                ('description', models.TextField(blank=True, help_text="Descrizione dell'utente (256 caratteri max)", max_length=256, null=True, verbose_name='description')),
                ('location', models.CharField(blank=True, max_length=32, null=True, verbose_name='location')),
                ('slug', models.SlugField(blank=True, editable=False)),
                ('secret_key', models.SlugField(blank=True, editable=False, unique=True, verbose_name='secret key')),
                ('project_saved', models.ManyToManyField(blank=True, related_name='saved_by', related_query_name='saved_by', to='Core.Project')),
                ('skills', models.ManyToManyField(related_name='users', related_query_name='users', through='Core.UserSkill', to='Core.Skill')),
                ('user_saved', models.ManyToManyField(blank=True, related_name='_Core_user_user_saved_+', related_query_name='saved_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
            bases=(models.Model, Core.models.Abstracts.AbstractFile.FileManager),
        ),
        migrations.AddField(
            model_name='userskill',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_skill', related_query_name='user_skill', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('updated_at', models.DateTimeField(default=None, editable=False, help_text='Data di aggiornamento del modello', null=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(db_column='date_added', default=None, editable=False, help_text='Data di aggiunta utente nel progetto', null=True, verbose_name='created at')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Core.project')),
                ('role', models.ManyToManyField(blank=True, help_text="Elenco dei ruoli dell'utente all'interno del progetto", related_name='users', related_query_name='users', to='Core.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Project',
                'verbose_name_plural': 'User Projects',
                'db_table': 'user_project',
                'ordering': ['-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserEducation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('University', 'University'), ('Highschool', 'Highschool'), ('Master', 'Master'), ('Course', 'Course'), ('Doctorate', 'Doctorate'), ('Other', 'Other')], default='Other', max_length=32)),
                ('description', models.TextField(blank=True, max_length=516, null=True, verbose_name='description')),
                ('started_at', models.DateField()),
                ('ended_at', models.DateField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='educations', related_query_name='educations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Education',
                'verbose_name_plural': 'User Educations',
                'db_table': 'user_education',
                'ordering': ['started_at'],
            },
        ),
        migrations.CreateModel(
            name='Showcase',
            fields=[
                ('created_at', models.DateTimeField(default=None, editable=False, help_text='Data di creazione del modello', null=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(default=None, editable=False, help_text='Data di aggiornamento del modello', null=True, verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=516, null=True, verbose_name='description')),
                ('color', models.CharField(blank=True, max_length=16, null=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='showcases_created', related_query_name='showcases_created', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showcases', related_query_name='showcases', to='Core.project')),
                ('users', models.ManyToManyField(blank=True, related_name='showcases', related_query_name='showcases', to=settings.AUTH_USER_MODEL)),
                ('default', models.BooleanField(default=False, help_text='Indica se una bacheca Ã¨ default o meno'),),
            ],
            options={
                'verbose_name': 'Showcase',
                'verbose_name_plural': 'Showcases',
                'db_table': 'showcase',
            },
        ),
        migrations.CreateModel(
            name='SearchCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_cards', related_query_name='search_cards', to='Core.project')),
                ('skills', models.ManyToManyField(help_text='Le abilitÃ  richieste nella casta di ricerca', related_name='search_cards', related_query_name='search_cards', to='Core.Skill')),
            ],
            options={
                'verbose_name': 'Search Card',
                'verbose_name_plural': 'Search Cards',
                'db_table': 'search_card',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects_created', related_query_name='projects_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='I tags che identificano il progetto', related_name='projects', related_query_name='projects', to='Core.ProjectTag'),
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(related_name='projects', related_query_name='projects', through='Core.UserProject', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PollOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True, max_length=516, null=True, verbose_name='text')),
                ('votes', models.ManyToManyField(blank=True, help_text="I voti dati all'opzione del sondaggio", related_name='poll_option_votes', related_query_name='poll_option_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Poll Option',
                'verbose_name_plural': 'Poll Options',
                'db_table': 'poll_option',
            },
        ),
        migrations.AddField(
            model_name='message',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', related_query_name='messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='showcase',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', related_query_name='messages', to='Core.showcase'),
        ),
        migrations.AddField(
            model_name='message',
            name='viewed_by',
            field=models.ManyToManyField(blank=True, related_name='messages_visualize', related_query_name='messages_visualize', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ExternalProject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to=Core.models.Users.ExternalProject.image_path)),
                ('link_site', models.CharField(blank=True, max_length=516, null=True)),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=512, null=True, verbose_name='description')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_projects', related_query_name='external_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'External Project',
                'verbose_name_plural': 'External Projects',
                'db_table': 'external_project',
            },
            bases=(models.Model, Core.models.Abstracts.AbstractFile.FileManager),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('date_birth__lte', django.db.models.functions.datetime.Now())), name='check_user_date_birth'),
        ),
        migrations.AddConstraint(
            model_name='userskill',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('level__gte', 1), ('level__lte', 5))), name='check_user_skill_level'),
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('skill', 'user')},
        ),
        migrations.AddConstraint(
            model_name='userproject',
            constraint=models.CheckConstraint(check=models.Q(('updated_at__gte', django.db.models.expressions.F('created_at'))), name='check_userproject_updated_at'),
        ),
        migrations.AlterUniqueTogether(
            name='userproject',
            unique_together={('user', 'project')},
        ),
        migrations.AddConstraint(
            model_name='usereducation',
            constraint=models.CheckConstraint(check=models.Q(('ended_at__gt', django.db.models.expressions.F('started_at'))), name='check_user_education_start_date'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.CheckConstraint(check=models.Q(('ended_at__lte', django.db.models.functions.datetime.Now())), name='check_ended_at'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.CheckConstraint(check=models.Q(('updated_at__gte', django.db.models.expressions.F('created_at'))), name='check_project_updated_at'),
        ),
        migrations.AddField(
            model_name='polloption',
            name='poll',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', related_query_name='options', to='Core.poll'),
        ),
        migrations.AddField(
            model_name='messagefile',
            name='message',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', related_query_name='files', to='Core.textmessage'),
        ),
        migrations.AddConstraint(
            model_name='message',
            constraint=models.CheckConstraint(check=models.Q(('updated_at__gte', django.db.models.expressions.F('created_at'))), name='check_message_updated_at'),
        ),
        migrations.AddField(
            model_name='eventtask',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', related_query_name='tasks', to='Core.event'),
        ),
        migrations.AddField(
            model_name='event',
            name='partecipants',
            field=models.ManyToManyField(blank=True, help_text="Partecipanti all'evento", related_name='events', related_query_name='events', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('started_at__lte', django.db.models.expressions.F('ended_at'))), name='check_event_started_at_gte'),
        ),
    ]

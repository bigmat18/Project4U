# Generated by Django 3.2.7 on 2021-10-31 15:23

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Idea',
            fields=[
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Idea',
                'verbose_name_plural': 'Ideas',
                'db_table': 'idea',
            },
        ),
        migrations.CreateModel(
            name='IdeaComment',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('opinion', models.BooleanField(verbose_name='opinion')),
            ],
            options={
                'verbose_name': 'Idea Comment',
                'verbose_name_plural': 'Idea Comments',
                'db_table': 'idea_comment',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_message', models.CharField(choices=[('TXT', 'TextMessage'), ('EV', 'Event'), ('ID', 'Idea')], default='TXT', max_length=32)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'db_table': 'message',
            },
        ),
        migrations.CreateModel(
            name='MillestonePost',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='title', max_length=64, verbose_name='title')),
            ],
            options={
                'verbose_name': 'Millestone Post',
                'verbose_name_plural': 'Millestone Posts',
                'db_table': 'millestone_post',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='slug')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='', verbose_name='image')),
                ('text', models.CharField(blank=True, db_column='caption', help_text="Didascalia descrittiva dell'immagine", max_length=256, null=True, verbose_name='caption')),
                ('name', models.CharField(db_column='title', max_length=64, verbose_name='title')),
                ('intro', models.CharField(max_length=516, verbose_name='intro')),
                ('content', models.TextField(verbose_name='content')),
            ],
            options={
                'verbose_name': 'News',
                'verbose_name_plural': 'News',
                'db_table': 'news',
            },
        ),
        migrations.CreateModel(
            name='NewsParagraph',
            fields=[
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_paragraph', models.IntegerField(default=0, verbose_name='order paragraph')),
                ('content', models.TextField(verbose_name='content')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paragraphes', related_query_name='peragraphes', to='Core.news')),
            ],
            options={
                'verbose_name': 'News Paragraph',
                'verbose_name_plural': 'News Paragraphes',
                'db_table': 'news_paragraph',
            },
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('anonymus_creator', models.BooleanField(default=False, verbose_name='anonymus creator')),
                ('anonymus_voters', models.BooleanField(default=False, verbose_name='anonymus voters')),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='poll', related_query_name='poll', to='Core.message')),
            ],
            options={
                'verbose_name': 'Polls',
                'verbose_name_plural': 'Polls',
                'db_table': 'poll',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('view_number', models.PositiveBigIntegerField(default=0, verbose_name='views number')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='image')),
                ('link_site', models.CharField(blank=True, help_text='Link del sito di contatto del progetto', max_length=516, null=True, verbose_name='link site')),
                ('ended_at', models.DateTimeField(blank=True, help_text='Data di chiusura del progetto. Se null il progetto Ã¨ aperto', null=True, verbose_name='ended')),
                ('num_swipe', models.PositiveBigIntegerField(default=0, help_text='Il numero di swipe fatti dal progetto', verbose_name='number swipe')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_skill', models.CharField(choices=[('Programming', 'Programming'), ('Managment', 'Management'), ('Design', 'Design'), ('Other', 'Other')], default='Other', max_length=64, verbose_name='type skill')),
            ],
            options={
                'verbose_name': 'Skill',
                'verbose_name_plural': 'Skills',
                'db_table': 'skill',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('searches_number', models.PositiveIntegerField(default=0, help_text='Numero di ricerche fatte a questo tag', verbose_name='searches number')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='TextPost',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Text Post',
                'verbose_name_plural': 'Text Posts',
                'db_table': 'text_post',
            },
        ),
        migrations.CreateModel(
            name='UserSkill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.PositiveIntegerField(default=1, help_text="Livello di competenza della skill dell'utente", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Core.skill')),
            ],
            options={
                'verbose_name': 'User Skill',
                'verbose_name_plural': 'Users Skills',
                'db_table': 'user_skill',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('message_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Core.message')),
                ('data', models.DateTimeField(help_text="Data dell'evento", verbose_name='date')),
                ('level_completation', models.PositiveIntegerField(default=1, help_text="Livello di completamento dell'evento", verbose_name='level completation')),
                ('text', models.TextField(blank=True, db_column='description', null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'event',
            },
            bases=('Core.message', models.Model),
        ),
        migrations.CreateModel(
            name='TextMessage',
            fields=[
                ('message_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='Core.message')),
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
            ],
            options={
                'verbose_name': 'Text Message',
                'verbose_name_plural': 'Text Messages',
                'db_table': 'text_message',
            },
            bases=('Core.message', models.Model),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='slug')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='image')),
                ('date_birth', models.DateField(blank=True, null=True, verbose_name='date birth')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('active', models.BooleanField(default=True, verbose_name='is active')),
                ('blocked', models.BooleanField(default=False, help_text='Indica se un utente Ã¨ stato bloccato.', verbose_name='is blocked')),
                ('admin', models.BooleanField(default=False, verbose_name='is admin')),
                ('type_user', models.CharField(choices=[('01', 'Base'), ('02', 'Verified'), ('03', 'Innovator')], default='01', max_length=64, verbose_name='type user')),
                ('type_vip', models.CharField(choices=[('FREE', 'Free'), ('LV1', 'Level 01'), ('LV2', 'Level 02'), ('LV3', 'Level 03')], default='FREE', max_length=64, verbose_name='type vip')),
                ('highscool', models.CharField(blank=True, help_text='La scuola superiori frequentata', max_length=256, null=True, verbose_name='highscool')),
                ('university', models.CharField(blank=True, help_text="L'universitÃ  frequentata", max_length=256, null=True, verbose_name='university')),
                ('extra', models.TextField(blank=True, help_text='Le esperienze scolasti o non, extra dello user', null=True, verbose_name='extra')),
                ('project_saved', models.ManyToManyField(related_name='saved_by', related_query_name='saved_by', to='Core.Project')),
                ('skills', models.ManyToManyField(related_name='users', related_query_name='users', through='Core.UserSkill', to='Core.Skill')),
                ('user_saved', models.ManyToManyField(related_name='_Core_user_user_saved_+', related_query_name='saved_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
        ),
        migrations.AddField(
            model_name='userskill',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserProject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di aggiunta utente nel progetto', verbose_name='date added')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Core.project')),
                ('role', models.ManyToManyField(help_text="Elenco dei ruoli dell'utente all'interno del progetto", related_name='users', related_query_name='users', to='Core.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Project',
                'verbose_name_plural': 'User Projects',
                'db_table': 'user_project',
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='Showcase',
            fields=[
                ('name', models.CharField(max_length=64, verbose_name='name')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='showcases', related_query_name='showcases', to='Core.project')),
                ('users', models.ManyToManyField(related_name='showcases', related_query_name='showcases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Showcase',
                'verbose_name_plural': 'Showcases',
                'db_table': 'showcase',
            },
        ),
        migrations.CreateModel(
            name='SearchCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(blank=True, db_column='decription', null=True, verbose_name='description')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_cards', related_query_name='search_cards', to='Core.project')),
                ('skills', models.ManyToManyField(help_text='Le abilitÃ  richieste nella casta di ricerca', related_name='search_cards', related_query_name='search_cards', to='Core.Skill')),
            ],
            options={
                'verbose_name': 'Search Card',
                'verbose_name_plural': 'Search Cards',
                'db_table': 'search_card',
            },
        ),
        migrations.AddField(
            model_name='role',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', related_query_name='roles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ProjectQuestion',
            fields=[
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='slug')),
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_questions', related_query_name='proejct_questions', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', related_query_name='questions', to='Core.project')),
            ],
            options={
                'verbose_name': 'Project Question',
                'verbose_name_plural': 'Project Questions',
                'db_table': 'project_question',
            },
        ),
        migrations.CreateModel(
            name='ProjectAnswer',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_answers', related_query_name='project_answers', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', related_query_name='answers', to='Core.projectquestion')),
            ],
            options={
                'verbose_name': 'Project Answer',
                'verbose_name_plural': 'Project Answers',
                'db_table': 'project_answer',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects_created', related_query_name='projects_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(help_text='I tags che identificano il progetto', related_name='projects', related_query_name='projects', to='Core.Tag'),
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(related_name='projects', related_query_name='projects', through='Core.UserProject', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_postcomment_author', related_query_name='core_postcomment_author', to=settings.AUTH_USER_MODEL)),
                ('likes_num', models.ManyToManyField(related_name='core_postcomment_likes', related_query_name='core_postcomment_likes', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comments', to='Core.post')),
            ],
            options={
                'verbose_name': 'Post Comment',
                'verbose_name_plural': 'Post Comments',
                'db_table': 'post_comment',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', related_query_name='posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='likes_numer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts_likes', related_query_name='posts_likes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PollOption',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', related_query_name='options', to='Core.poll')),
                ('votes', models.ManyToManyField(help_text="I voti dati all'opzione del sondaggio", related_name='poll_option_votes', related_query_name='poll_option_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Poll Option',
                'verbose_name_plural': 'Poll Options',
                'db_table': 'poll_option',
            },
        ),
        migrations.CreateModel(
            name='NewsParagraphImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='', verbose_name='image')),
                ('text', models.CharField(blank=True, db_column='caption', help_text="Didascalia descrittiva dell'immagine", max_length=256, null=True, verbose_name='caption')),
                ('paragraph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', related_query_name='images', to='Core.newsparagraph')),
            ],
            options={
                'verbose_name': 'News Paragraph Image',
                'verbose_name_plural': 'News Paragraph Images',
                'db_table': 'news_paragraph_image',
            },
        ),
        migrations.AddField(
            model_name='message',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', related_query_name='messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='message',
            name='showcase',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', related_query_name='messages', to='Core.showcase'),
        ),
        migrations.CreateModel(
            name='IdeaSubComment',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_ideasubcomment_author', related_query_name='core_ideasubcomment_author', to=settings.AUTH_USER_MODEL)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcomments', related_query_name='subcomments', to='Core.ideacomment')),
                ('likes_num', models.ManyToManyField(related_name='core_ideasubcomment_likes', related_query_name='core_ideasubcomment_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Idea SubComment',
                'verbose_name_plural': 'Idea SubComments',
                'db_table': 'idea_subcomment',
            },
        ),
        migrations.CreateModel(
            name='IdeaImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='', verbose_name='image')),
                ('text', models.CharField(blank=True, db_column='caption', help_text="Didascalia descrittiva dell'immagine", max_length=256, null=True, verbose_name='caption')),
                ('idea', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', related_query_name='images', to='Core.idea')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IdeaCommentImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='', verbose_name='image')),
                ('text', models.CharField(blank=True, db_column='caption', help_text="Didascalia descrittiva dell'immagine", max_length=256, null=True, verbose_name='caption')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', related_query_name='images', to='Core.ideacomment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='ideacomment',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_ideacomment_author', related_query_name='core_ideacomment_author', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ideacomment',
            name='idea',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comments', to='Core.idea'),
        ),
        migrations.AddField(
            model_name='ideacomment',
            name='likes_num',
            field=models.ManyToManyField(related_name='core_ideacomment_likes', related_query_name='core_ideacomment_likes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='idea',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ideas', related_query_name='ideas', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='idea',
            name='message',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ideas', related_query_name='ideas', to='Core.message'),
        ),
        migrations.AddField(
            model_name='idea',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ideas', related_query_name='ideas', to='Core.project'),
        ),
        migrations.CreateModel(
            name='EventUpdate',
            fields=[
                ('text', models.TextField(help_text='Testo del modello', verbose_name='text')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Data di creazione del modello', verbose_name='created at')),
                ('updated_at', models.DateTimeField(help_text='Data di aggiornamento del modello', verbose_name='updated at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_updates', related_query_name='event_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Update',
                'verbose_name_plural': 'Event Updates',
                'db_table': 'event_update',
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('date_birth__gte', datetime.datetime(2021, 10, 31, 15, 23, 47, 315997, tzinfo=utc))), name='date_birth__gte'),
        ),
        migrations.AlterUniqueTogether(
            name='userskill',
            unique_together={('skill', 'user')},
        ),
        migrations.AddIndex(
            model_name='userproject',
            index=models.Index(fields=['-date_added'], name='user_projec_date_ad_00e3da_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userproject',
            unique_together={('user', 'project')},
        ),
        migrations.AddField(
            model_name='event',
            name='partecipants',
            field=models.ManyToManyField(help_text="Partecipanti all'evento", related_name='events', related_query_name='events', to=settings.AUTH_USER_MODEL),
        ),
    ]
